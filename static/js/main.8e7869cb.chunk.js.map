{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Heading.js","components/HeroesCard/Card.js","components/Container/Container.js","components/Row/Row.js","components/Col/Col.js","components/Footer/Footer.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","Heading","children","Card","onClick","imageClick","id","name","src","image","alt","key","Container","Row","fluid","Col","size","split","map","join","Footer","Title","App","state","heroes","answers","score","topScore","message","imageShuffle","setState","sort","Math","random","clicked","heroImages","console","log","forEach","hero","element","length","alert","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e7869cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"navbar bg-primary navbar-expand-lg\">\r\n           <h1>Marvel Clicky Game</h1>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nconst Heading = (props) => {\r\n    return (\r\n\r\n        <div className=\"jumbotron-fluid\">\r\n            <div className=\"heading\">\r\n                <h1>{props.children}</h1>\r\n                \r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Heading;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container text-center\">\r\n        <img onClick={() => props.imageClick(props.id, props.name)}  src={props.image} alt={props.name} key={props.id}/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Container = (props) => {\r\n    return <div className=\"container\">{props.children}</div>\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Row = props => {\r\n  return (\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\r\n  );\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nconst Col = props => {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size} {...props} />;\r\n}\r\n\r\nexport default Col;","import React from \"react\";\r\n\r\nconst Footer = (props) => {\r\n    return(\r\n        <div className=\"footer bg-primary text-center\">\r\n        <div className=\"container\">\r\n        Create by: Roy Davis using React.js\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Title = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h3>{props.children}</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Title;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Heading from './components/Header/Heading';\nimport Card from \"./components/HeroesCard/Card\";\nimport Container from \"./components/Container/Container\";\nimport Row from \"./components/Row/Row\";\nimport Col from \"./components/Col/Col\";\nimport Footer from \"./components/Footer/Footer\";\nimport Title from \"./components/Title/Title\";\nimport heroes from \"./heroes.json\";\n\n\nclass App extends Component {\n  state = {\n    heroes,\n    answers: [],\n    score: 0,\n    topScore: 0,\n    message: \"Click a Hero to get started\"\n  };\n\n\n\n  imageShuffle = () => {\n    this.setState({ heroes: this.state.heroes.sort(() => Math.random() - 0.5) });\n  }\n  componentDidMount() {\n    this.imageShuffle();\n  }\n\n  imageClick = (id, name, clicked) => {\n\n    const heroImages = this.state.heroes\n    console.log(id);\n    console.log(name);\n\n    console.log(clicked);\n\n    console.log(heroImages);\n\n\n    heroImages.forEach((hero) => {\n\n      if (hero.id === id && hero.clicked) {\n        heroImages.forEach((element) => {\n          element.clicked = false \n        });   \n        this.setState({\n          message: \"Sorry, you already clicked that hero. You Lose.\", \n          score: 0});\n      } else if (hero.id === id && !hero.clicked) {\n          hero.clicked = true\n          this.setState({\n            message: \"Good Job. You clicked a new Hero\", \n            score: this.state.score + 1,\n            topScore: this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore\n          });\n          console.log(this.state.score)\n      }\n    })\n\n    if (this.state.score +1 === heroImages.length) {\n      alert(\"you won!\")\n      this.setState({\n        message: \"Play again!\", \n        score: 0,\n        topScore: 0});\n    } \n\n    this.imageShuffle()    \n    }\n\n  \n\n\n\n\n  render() {\n    return (\n\n      <Container>\n        <Navbar> The Marvel Heroes clicky game  </Navbar>\n        \n          <Heading>  Score: {this.state.score} | Top Score: {this.state.topScore}</Heading>\n          <Title>{this.state.message}</Title>\n          <Row>\n\n            {this.state.heroes.map(hero => (\n              <Col size=\"sm\" key={hero.id}>\n                <Card\n                  id={hero.id}\n                  key={hero.id}\n                  name={hero.name}\n                  image={hero.image}\n                  imageClick={this.imageClick}\n                />\n              </Col>\n            ))}\n          </Row>\n        \n        <Footer />\n        </Container>\n    )\n  }\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}